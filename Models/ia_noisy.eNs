create model ia

# LOAD DATABASES

# ## LETTER FEATURE REPRESENTATION
create dataframe_for_reps features_db
features_db load Databases/letter_features_no_blank.eNd

# ## ORTHOGRAPHY, PHONOLOGY, FREQUENCIES
create dataframe_for_reps vocab
vocab load Databases/Vocab_files/ia.eNd
#vocab load Databases/Vocab_files/clam.eNd
#vocab load Databases/Vocab_files/iaBLP.eNd
#vocab load Databases/Vocab_files/ia_AoA1.eNd


# LEXICAL ROUTE LAYERS

# ## FEATURE LAYER
create representation feat_rep
feat_rep type blocked_representation
feat_rep set_element (features_db column_rep features)
feat_rep number 4
create iac_layer features
features represent feat_rep

#create pattern _mask
#_mask set feat_rep 1P/0 2P/0 3P/0 4A/0 5P/0 6P/0  7A/0 8A/0 9P/0 10P/0 11A/0 12P/0 13P/0 14P/0 1P/1 2P/1 3P/1 4A/1 5P/1 6P/1 7A/1 8A/1 9P/1 10P/1 11A/1 12P/1 13P/1 14P/1 1P/2 2P/2 3P/2 4A/2 5P/2 6P/2 7A/2 8A/2 9P/2 10P/2 11A/2 12P/2 13P/2 14P/2 1P/3 2P/3 3P/3 4A/3 5P/3 6P/3 7A/3 8A/3 9P/3 10P/3 11A/3 12P/3 13P/3 14P/3

# ## LETTER LAYER
create representation letter_rep
letter_rep type blocked_representation
letter_rep set_element (features_db column_rep letter)
letter_rep number 4

create iac_layer letters
letters represent letter_rep

create noise_layer letnoise
letnoise represent letter_rep


# ## ORTHORAPHIC LEXICON (LAYER)
create iac_layer words
words represent (vocab column_rep Word)

# LEXICAL ROUTE CONNECTIONS

# ## FEATURE-LETTER
create connection flc
flc autoconnect features letters

# ## LETTER-ORTH
create string_split orth_str
# string_split is a conversion; it is a special conversion that generates the target representation
#   this target representation is (orth_str target)
#   (orth_str target) is a block_rep of (orth_str inner)
#   (orth_str inner) is a string_representation that is the single letters used in
#      (vocab column_rep Word string_representation)
orth_str set_blank "
orth_str set_source (vocab column_rep Word string_representation)
#   (vocab column_rep Word) == (vocab column_rep Word keyed_representation) which is a keyed_representation
#   (vocab column_rep Word string_representation) is the "dog" string_rep rather than the binary keyed_rep



create equiv_conversion lettersc
lettersc set_target (features_db column_rep letter string_representation)
lettersc set_source (orth_str inner)

create equiv_conversion lettersc2
lettersc2 set_source (features_db column_rep letter string_representation)
lettersc2 set_target (orth_str inner)


# this section is to ensure that we can use our special non-letter letters (ambiguous R/K stimulus: *)
((features_db column_rep features) find_conversion (orth_str inner)) set_auto 1
create parallel_conversion bananas
bananas set_source (orth_str get_target)
bananas set_target feat_rep

# these are the old solution to the problem of ensuring we can map from the string_rep to the feature
#    binary patterns; I suspect unnecessary with the above [UPDATE: CD -- tested script without the following, and conversions failed]
create parallel_conversion lopc
lopc set_source letter_rep
lopc set_target (orth_str get_target)
create parallel_conversion lopc2
lopc2 set_source (orth_str get_target)
lopc2 set_target letter_rep

include Models/lowerupper.eNs
((features_db column_rep letter) find_conversion (orth_str inner)) add_fallback caser

#loglevel debug
create connection loc
loc autoconnect letters words


create connection lnoise
lnoise autoconnect letnoise letters
#loc details

create connection olc
olc autoconnect words letters


# ## ORTH-ORTH
create connection lato
lato autoconnect words words

#create connection leto
#leto autoconnect letters letters

# OBSERVERS


# MODEL GROUP


ia define_input orthographic (vocab column_rep Word string_representation) features

words set_resting_level (vocab column_rep Rest)

include Models/extras.eNs
caser_plus add_fallback extras
((features_db column_rep features) find_conversion (orth_str inner)) add_fallback caser_plus
((features_db column_rep features) find_conversion (orth_str inner)) set_weight -1

