load spatial_hub_connection spatial_hub_connection.so
load wtstring_representation wtstring_representation.so

# LOAD LIBRARY FILES

create model scm-drc

# LOAD DATABASES

# ## LETTER FEATURE REPRESENTATION
create dataframe_for_reps features_db
features_db load Databases/letter_features_no_blank.eNd
create dataframe_for_reps features_dbx
features_dbx load Databases/letter_features.eNd
create dataframe_for_reps lh2
lh2 load Databases/blankhelp2.eNd

#create equiv_conversion blankhelp
#blankhelp set_source (features_db column_rep letter string_representation)
#blankhelp set_target (features_dbx column_rep letter string_representation)
#create equiv_conversion blankhelpr
#blankhelpr set_target (features_db column_rep letter string_representation)
#blankhelpr set_source (features_dbx column_rep letter string_representation)

create equiv_conversion blankhelp
blankhelp set_source (features_db column_rep letter)
blankhelp set_target (features_dbx column_rep letter)
create equiv_conversion blankhelpr
blankhelpr set_target (features_db column_rep letter)
blankhelpr set_source (features_dbx column_rep letter)


create dataframe_for_reps decisions
decisions load Databases/decisions.eNd


create dataframe_for_reps letterlist
letterlist load Databases/lettersno.eNd
# LEXICAL ROUTE LAYERS

# ## FEATURE LAYER
create representation feat_rep
feat_rep type blocked_representation
feat_rep set_element (features_db column_rep features)
feat_rep number 10

create iac_layer features
features represent feat_rep
features add_hint plot_type plot_features.R

# ## LETTER LAYER

create representation letter_rep
letter_rep type blocked_representation
letter_rep set_element (features_db column_rep letter)
letter_rep number 10

create representation letter_repx
letter_repx type blocked_representation
letter_repx set_element (features_dbx column_rep letter)
letter_repx number 10

create equiv_conversion blankwide
blankwide set_target (lh2 column_rep letter)
blankwide set_source letter_rep

create equiv_conversion blankwideR
blankwideR set_source (lh2 column_rep letter)
blankwideR set_target letter_rep

create equiv_conversion blankwide2
blankwide2 set_target (lh2 column_rep letter)
blankwide2 set_source letter_repx

create equiv_conversion blankwide2R
blankwide2R set_source (lh2 column_rep letter)
blankwide2R set_target letter_repx

create iac_layer letters
letters represent letter_rep

#create iac_layer fast_letters
#fast_letters represent letter_rep

create strength_layer most_letter
most_letter represent letter_rep

#create binary_layer best_letters_bin
#best_letters_bin represent letter_rep
create string_split orth_str
orth_str set_source (scm_orth_freq_db column_rep Word string_representation)
orth_str set_min 10

#create string_layer best_letters_str
#best_letters_str represent (orth_str get_target)

create strength_layer initial
initial represent (features_db column_rep letter)

create strength_layer final
final represent (features_db column_rep letter)

create spatial_representation spo
spo set_keys (features_db column_rep letter)
create spatial_layer spatial_code
spatial_code represent spo

create count_characters_conversion letcounter
letcounter set_source (orth_str get_target)
create binary_layer letcount
letcount represent (letcounter get_target)




# ## ORTHOGRAPHIC LEXICON (LAYER)
create scm_layer words
words represent (scm_orth_freq_db column_rep Word)
#words set_match_dependency spatial_code

create bias_layer freql
freql represent (scm_orth_freq_db column_rep Rest)
#words set_match_dependency spoc

create binary_layer id_layer
id_layer represent (scm_orth_freq_db column_rep Word)

create iac_layer_extended decision
decision represent (decisions column_rep Decision)

# letters rename_parameter min_act letters_min_act

create best_above_threshold_connection moster
moster set_autoconnect 0
moster attach letters
most_letter attach moster


# LEXICAL ROUTE CONNECTIONS

# ## FEATURE-LETTER
create connection flc
flc autoconnect features letters


#create connection flc_fast
#flc_fast autoconnect features fast_letters


create parallel_conversion lfpc
lfpc set_source letter_rep
lfpc set_target feat_rep

# ## LETTER-ORTH

create equiv_conversion letters_conv
letters_conv set_target (features_db column_rep letter string_representation)
letters_conv set_source (orth_str inner) 

create equiv_conversion letters2
letters2 set_source (features_db column_rep letter string_representation)
letters2 set_target (orth_str inner) 

create parallel_conversion lopc
lopc set_source letter_rep
lopc set_target (orth_str get_target)

create parallel_conversion lopc2
lopc2 set_source (orth_str get_target)
lopc2 set_target letter_rep

(letter_rep find_conversion (scm_orth_freq_db column_rep Word)) set_weight -1
include Models/lowerupper.eNs
((features_db column_rep letter) find_conversion (orth_str inner)) add_fallback caser

create blocked_localist_to_spatial_conversion llspco
llspco set_source letter_rep
llspco set_target spo

create connection spoc_i
spoc_i autoconnect spatial_code words inhibitory
create spatial_hub_connection spoc
spoc autoconnect spatial_code words
#spoc share_lookup spoc_i

create select_block_conversion initial_conv
initial_conv set_source letter_rep
initial_conv set_position 0


create connection letinitialc
letinitialc set_autoconnect 1
letinitialc attach letters 
initial attach letinitialc
#letinitialc conversion_connect initial_conv

#loglevel debug
create connection initialolc
initialolc autoconnect initial words
initial_conv set_auto_use 0
#loglevel info

create select_block_conversion final_conv
final_conv set_source letter_rep
final_conv set_position -1


create connection letfinalc
letfinalc set_autoconnect 1
letfinalc attach letters 
final attach letfinalc
#letfinalc conversion_connect final_conv

create connection finalolc
finalolc autoconnect final words
final_conv set_auto_use 0


create connection lspc
lspc autoconnect letters spatial_code

# ## ORTH-LETTER
#create connection olc
#olc autoconnect words letters
#olc rename_parameter excitation orth_letter_excitation
#olc rename_parameter inhibition orth_letter_inhibition

# ## ORTH-ORTH
xmllint 1
create connection lato
lato type prepostdiag_connection
lato set_autoconnect 0
lato attach words
words attach lato inhibitory

lato set_input_multipliers (scm_orth_freq_db column_rep MF)
lato set_output_multipliers (scm_orth_freq_db column_rep RMF)


create equiv_conversion yes_conv
yes_conv set_source (scm_orth_freq_db column_rep Decision)
yes_conv set_target (decisions column_rep Decision)

create equiv_conversion no_conv
no_conv set_source (letterlist column_rep Decision)
no_conv set_target (decisions column_rep Decision)

create equiv_conversion no_conv_rev
no_conv_rev set_target (letterlist column_rep Decision)
no_conv_rev set_source (decisions column_rep Decision)

create equiv_conversion lettering
lettering set_source letter_rep
lettering set_target (letterlist column_rep letter)




create selfweight_diag_connection decision_lat
decision_lat set_autoconnect 0
decision_lat attach decision 
decision attach decision_lat unshunted

create best_above_threshold_connection id_conn
id_conn set_autoconnect 0
id_conn attach words
id_layer attach id_conn

create pattern yes_patt
yes_patt set (decisions column_rep Decision) yes

create summate_connection id_yes_conn
id_yes_conn set_autoconnect 0
id_yes_conn attach id_layer
decision attach id_yes_conn
id_yes_conn answer_pattern yes_patt
#id_yes_conn autoconnect id_layer decision

create summate_connection word_yes_conn
word_yes_conn set_autoconnect 0
word_yes_conn attach words 
decision attach word_yes_conn
word_yes_conn answer_pattern yes_patt
#create connection word_yes_conn
#word_yes_conn autoconnect words decision

create connection mostletno
mostletno autoconnect most_letter decision

create connection freqb
freqb attach freql 
words attach freqb frequency_bias


#create blocked_connection bester
#bester attach fast_letters
#bester set_inner_type best_above_threshold_connection
#bester set_target_inner_rep (features_db column_rep letter)
#best_letters_bin attach bester


#create connection bestlls
#bestlls autoconnect best_letters_bin best_letters_str


#create connection blslcc
#blslcc autoconnect best_letters_str letcount

#loglevel debug
create connection lcolc
lcolc autoconnect letcount words inhibitory
letcounter set_fixed 1
#loglevel warning 

#create spatial_tdf_connection olc
#olc set_autoconnect 0
#olc alignments_from spoc
#letters attach olc 

# DECISION RULE

create above_threshold_observer decision_obs
decision_obs target decision

# ASSEMBLE MODEL

create reset_nobserver resetter
resetter add_trigger (features state)
resetter add_sync features
resetter add_target letters
resetter add_target words
resetter add_target decision

initial set_lag 0
spatial_code set_lag 0
final set_lag 0
most_letter set_lag 0
#best_letters_bin set_lag 0
#best_letters_str set_lag 0
#letcount set_lag 0
#fast_letters set_lag 0
decision set_use_hard_cap 0
id_layer set_lag 0
flc set_lag 0

# SET PARAMETERS


words set_resting_level (scm_orth_freq_db column_rep Rest)

# CREATE CYCLE TO RUN THE MODEL

scm-drc define_input orthographic (scm_orth_freq_db column_rep Word string_representation) features letcount
scm-drc define_output lexical_decision decision_obs
include Models/extras.eNs
caser_plus add_fallback extras
((features_db column_rep features) find_conversion (orth_str inner)) add_fallback caser_plus
(feat_rep find_conversion (orth_str get_target)) set_weight -1

## DRC STUFF STARTS HERE

# ## PHONOLOGICAL LEXICON (LAYER)
create iac_layer phon_lex
phon_lex represent (op column_rep phonology)

#OB ## PHONEME LAYER (OUTPUT BUFFER)
create string_split phon_str_conv
phon_str_conv set_blank "
phon_str_conv set_source (op column_rep phonology string_representation)
#phon_str_conv set_min 8
phon_str_conv create_block_keyed phon_str_bk

create string_split phon_str_no_blank
phon_str_no_blank set_source (op column_rep phonology string_representation)

create equiv_conversion phonstrbl
phonstrbl set_source (phon_str_no_blank get_target)
phonstrbl set_target (phon_str_conv get_target)

create iac_layer phoneme_out
#phoneme_out represent phoneme_chars
phoneme_out represent phon_str_bk

create bias_layer phon_freq
phon_freq represent (phon_freq_db column_rep bias)

create equiv_conversion fconv1
fconv1 set_source (scm_orth_freq_db column_rep Word string_representation)
fconv1 set_target  (op column_rep orthography string_representation)

create equiv_conversion fconv2
fconv2 set_source (phon_freq_db column_rep phonology string_representation)
fconv2 set_target (op column_rep phonology string_representation)

create equiv_conversion fconv3
fconv3 set_source (op column_rep orthography string_representation)
fconv3 set_target (scm_orth_freq_db column_rep Word string_representation)

create equiv_conversion fconv4
fconv4 set_source (op column_rep phonology string_representation)
fconv4 set_target (phon_freq_db column_rep phonology string_representation)


# ## ORTH-PHON
create connection opc
opc autoconnect words phon_lex
 
# ## PHON-ORTH
create connection poc
poc autoconnect phon_lex words

# ## PHON-PHONEME
create connection ppmc
ppmc autoconnect phon_lex phoneme_out

# ## PHONEME-PHON
create connection pmpc
pmpc autoconnect phoneme_out phon_lex

# ## PHON-PHON
create connection latp
latp autoconnect phon_lex phon_lex

# ## PHONEME-PHONEME
create connection latpm
latpm autoconnect phoneme_out phoneme_out

create connection pfreqb
pfreqb autoconnect phon_freq phon_lex

# NAMING DECISION RULE

create serialize_blocks_observer thresholded_best_phonemes
thresholded_best_phonemes inner_type above_threshold_observer
thresholded_best_phonemes target phoneme_out
thresholded_best_phonemes rename_parameter threshold thresholded_best_phonemes_inner_threshold


create regex_observer pronouncer
pronouncer target thresholded_best_phonemes
pronouncer add ".* "
pronouncer add .*\?.* 
pronouncer add ^[^"]*$

scm-drc define_output pronunciation pronouncer

# ASSEMBLE MODEL


create string_representation pregraphemic
create string_representation grapheme_reps


create blocked_representation osgt
create string_representation osgt_inner
osgt set_element osgt_inner
osgt set_number 8
create flatten_string_conversion flat
flat set_source osgt
flat set_target pregraphemic

create strength_layer best_letters
best_letters represent letter_repx


create wtstring_layer best_letters_str
best_letters_str represent osgt

create iac_layer mediator
mediator represent (lh2 column_rep letter)

create strength_layer mediator2
mediator2 represent letter_repx

create connection mediate
mediate autoconnect letters mediator

create bias_layer blank
blank represent (lh2 column_rep Rest)

create connection blanker
blanker autoconnect blank mediator

create connection mediate2
mediate2 autoconnect mediator mediator2

create staggered_blocked_connection bester
bester attach mediator2
bester set_inner_type best_above_threshold_connection
bester set_target_inner_rep (features_dbx column_rep letter)
best_letters attach bester

create wtunkey_conversion osgt_unkey
osgt_unkey set_source (features_dbx column_rep letter)
osgt_unkey set_target osgt_inner

create wtkey_conversion psgt_key
psgt_key set_target (phon_str_bk element)
psgt_key set_source (phon_str_no_blank inner)
psgt_key set_weight 0.1

create wtstring_layer pre_graph 
pre_graph represent pregraphemic

create wtstring_layer graphemes
graphemes represent grapheme_reps

create wtstring_layer phon_str
phon_str represent (phon_str_no_blank get_target)

create strength_layer phonemes
phonemes represent phon_str_bk

create wtregex_side_effect_conversion graphemize
graphemize set_source pregraphemic
graphemize set_target grapheme_reps

create dataframe parse_graphemes_db
parse_graphemes_db load Databases/Vocab_files/RC99_parse_graphemes.eNd
parse_graphemes_db for_each_row graphemize add $search $replace $grapheme

create string_representation amphons

create string_representation flatamphons

create flatten_string_conversion pflat
pflat set_source amphons
pflat set_target flatamphons

create regex_conversion phonotactic
phonotactic set_target (op column_rep phonology string_representation)
phonotactic set_source flatamphons

create dataframe phonotactic_db
phonotactic_db load Databases/Vocab_files/DRC_phonotac.eNd
phonotactic_db for_each_row phonotactic add $search $replace

create wtregex_side_effect_conversion gpc
gpc set_target amphons
gpc set_source grapheme_reps

create dataframe grapheme_phoneme_db

grapheme_phoneme_db load Databases/Vocab_files/RC99_grapheme_phoneme.eNd

grapheme_phoneme_db for_each_row gpc add $search $replace $phoneme
create connection graphemizer
graphemizer autoconnect pre_graph graphemes

create connection gpcer
gpcer autoconnect graphemes phon_str

create connection phonbin
phonbin autoconnect phon_str phonemes


create connection nlpl
nlpl autoconnect phonemes phoneme_out


create blocked_connection bestlls
bestlls autoconnect best_letters best_letters_str

create connection blspg
blspg autoconnect best_letters_str pre_graph 

scm-drc add thresholded_best_phonemes
graphemes set_lag 0
phon_str set_lag 0
phonemes set_lag 0
best_letters set_lag 0
best_letters_str set_lag 0
pre_graph set_lag 0



mediator set_lag 0
mediator2 set_lag 0
