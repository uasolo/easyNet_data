create dataframe_for_reps vocab
vocab load $vocabulary_file

create string_split orth_str
orth_str set_source (vocab column_rep Word string_representation)
orth_str create_block_keyed letter_rep
orth_str set_min 0
(letter_rep element) add_symbol "
(letter_rep element) add_symbol #



create string_representation constraint_rep
create string_split chunk_spl
chunk_spl set_source constraint_rep

create string_representation prechunk
create string_split prechunk_spl
prechunk_spl set_source prechunk




load wtstring_representation wtstring_representation.so
create wtunkey_conversion wunk
wunk set_source (letter_rep element)
wunk set_target (prechunk_spl inner)

create pattern underscore
underscore set (prechunk_spl inner) =

create const_conversion underscore_cc
underscore_cc set underscore
wunk add_fallback underscore_cc

create flatten_string_conversion flat
flat set_source (orth_str get_target)
flat set_target (vocab column_rep Word string_representation)

create string_representation prefill
create flatten_string_conversion flat2
flat2 set_source (prechunk_spl inner)
flat2 set_target prefill
create regex_side_effect_conversion fillin
fillin set_source prefill
fillin set_target (chunk_spl inner)
fillin add = _ _
fillin add ([a-z])#? _ \1
fillin add # _ #


create string_representation normal
create string_representation normalw

create flatten_string_conversion nflat
nflat set_source normalw
nflat set_target normal

create regex_side_effect_conversion normalize
normalize set_source (chunk_spl get_target) 
normalize set_target normalw
normalize add _# ~ #
normalize add ^([^_~])\1$ ~ \1
normalize add ^([^_~])#$ ~ .*\1.*

create string_representation regex
create regex_conversion regexize
regexize set_source normal
regexize set_target regex
regexize add ([a-z])#+([a-z]) \1.+\2
regexize add \*# *
regexize add #\. .  
regexize add \.\*\.\* \.\*
regexize add \.\+\.\* \.\+
regexize add \.\*\.\+ \.\+
regexize add ^#+$ 
regexize add ^#+ .*
regexize add #+$ .*

create parallel_conversion bananas
bananas set_source letter_rep
bananas set_target (orth_str get_target)

create parallel_conversion bananas2
bananas2 set_source letter_rep
bananas2 set_target (prechunk_spl get_target)

#create parallel_conversion bananas3
#bananas3 set_source (prechunk_spl get_target)
#bananas3 set_target (chunk_spl get_target)


create latch_layer what
what represent letter_rep 
what set_lag 0
what change_hint plot_type layers/by_time_heat.R

create latch_layer where
where represent letter_rep 
where set_lag 0
where change_hint plot_type layers/by_time_heat.R

create string_representation input_rep

create equiv_conversion inputter
inputter set_target (vocab column_rep Word string_representation)
inputter set_source input_rep

create string_representation input_rep2

create equiv_conversion inputter2
inputter2 set_target (vocab column_rep Word string_representation)
inputter2 set_source input_rep2

create string_layer input
input represent input_rep
input set_lag 0

create fire_layer attention
attention add_facet ltrs_block_attention_weight_transfer
attention represent letter_rep
attention set_lag 0
attention change_hint plot_type layers/by_time_heat.R

create connection attend
attend autoconnect input attention

create regex_conversion marker
marker set_auto_use 0
marker set_source input_rep
marker set_target input_rep2
marker add [a-z] #
#marker add #$ #"

create conversion_chain markchain
markchain add_link_back marker
markchain add_link_back inputter2
markchain add_link_back orth_str
markchain add_link_back (orth_str parallel)

create connection mark_end
mark_end set_autoconnect 0
mark_end attach input
where attach mark_end
mark_end conv_connect markchain


create fire_layer locable
locable represent letter_rep
locable set_lag 0

create connection perception
perception autoconnect attention what

create connection perception2
perception2 autoconnect attention locable

create connection locating
locating autoconnect locable where


create string_layer chunks
chunks represent (chunk_spl get_target)
chunks set_lag 0
chunks change_hint plot_type layers/LTRS_chunk_layer.R
#chunks add_hint plot_type layers/LTRS_chunk_layer_2.R

create string_layer constraint
constraint represent regex
constraint set_lag 0

create connection stringer
stringer autoconnect what chunks

xml stringer

create connection stringer2
stringer2 autoconnect where chunks

create connection dechunk
dechunk autoconnect chunks constraint

#create latch_layer checker
#checker represent (vocab column_rep Word)
#checker set_lag 0
#checker add_facet clip_out

create accumulator_layer lexicon
lexicon represent (vocab column_rep Word)
lexicon set_lag 0
lexicon change_hint plot_type layers/by_time_grouped.R

create grep_connection matcher
matcher set_autoconnect 0
matcher attach constraint
lexicon attach matcher

#create connection builder
#builder autoconnect checker lexicon

create best_above_threshold_observer word_id
word_id target lexicon
(default_model) add word_id

create regex_observer yes_decider
yes_decider target word_id
yes_decider add \?
yes_decider add .+ yes

#create above_threshold_observer word_ok
#word_ok target checker
#ltrs add word_ok

#create regex_observer no_decider
#no_decider target word_ok
#no_decider add [^\?]*
#no_decider add \? no

create reset_nobserver reset
reset add_trigger (input state)
reset add_sync input
#reset add_target attention
reset add_target what
reset add_target where
reset add_target reset
#reset add_target checker 
reset add_target locable

(default_model) define_input orthographic input_rep input
(default_model) define_output lexical_decision yes_decider
#ltrs define_output lexical_decision no_decider

((default_model) parameters) load $parameter_file

