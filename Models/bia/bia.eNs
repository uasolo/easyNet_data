# LOAD DATABASES

# ## LETTER FEATURE REPRESENTATION
create dataframe_for_reps features_db
features_db load Databases/letter_features_no_blank.eNd

# ## ORTHOGRAPHY, PHONOLOGY, FREQUENCIES
create dataframe_for_reps l2_vocab
create dataframe_for_reps l1_vocab
l1_vocab load $L1_vocab_file
l2_vocab load $L2_vocab_file
create keyed_representation language_kr
language_kr add_symbol $L1_name
language_kr add_symbol $L2_name
create pattern L1
L1 set language_kr $L1_name
create pattern L2
L2 set language_kr $L2_name

create vector_representation language_rest
language_rest add_dimension Rest
create pattern L1_rest
L1_rest set language_rest $L1_resting
create pattern L2_rest
L2_rest set language_rest $L2_resting


create manual_conversion rester
rester set_source language_kr
rester set_target language_rest
rester add L1 L1_rest
rester add L2 L2_rest

# LEXICAL ROUTE LAYERS

# ## FEATURE LAYER
create representation feat_rep
feat_rep type blocked_representation
feat_rep set_element (features_db column_rep features)
feat_rep number 4
create strength_layer features
features represent feat_rep
features add_hint plot_type layers/plot_features.R

#create pattern _mask
#_mask set feat_rep 1P/0 2P/0 3P/0 4A/0 5P/0 6P/0  7A/0 8A/0 9P/0 10P/0 11A/0 12P/0 13P/0 14P/0 1P/1 2P/1 3P/1 4A/1 5P/1 6P/1 7A/1 8A/1 9P/1 10P/1 11A/1 12P/1 13P/1 14P/1 1P/2 2P/2 3P/2 4A/2 5P/2 6P/2 7A/2 8A/2 9P/2 10P/2 11A/2 12P/2 13P/2 14P/2 1P/3 2P/3 3P/3 4A/3 5P/3 6P/3 7A/3 8A/3 9P/3 10P/3 11A/3 12P/3 13P/3 14P/3

# ## LETTER LAYER
create representation letter_rep
letter_rep type blocked_representation
letter_rep set_element (features_db column_rep letter)
letter_rep number 4

create iac_layer letters
letters represent letter_rep

# ## ORTHOGRAPHIC LEXICON (LAYER)
create iac_layer l2_words
l2_words represent (l2_vocab column_rep Word)
l2_words set_pretty_name $L2_name Words
create iac_layer l1_words
l1_words represent (l1_vocab column_rep Word)
l1_words set_pretty_name $L1_name Words

create iac_layer languages
languages represent language_kr 

l2_words set_resting_level (l2_vocab column_rep Rest)
l1_words set_resting_level (l1_vocab column_rep Rest)
languages set_resting_level language_rest 

# LEXICAL ROUTE CONNECTIONS

# ## FEATURE-LETTER
create connection flc
flc autoconnect features letters

# ## LETTER-ORTH
create string_split l1_orth_str
create string_split l2_orth_str
l1_orth_str set_source (l1_vocab column_rep Word string_representation)
l2_orth_str set_source (l2_vocab column_rep Word string_representation)

create dataframe_for_reps uplow
uplow load Databases/uplow.eNd

create equiv_conversion ortho_is_lower_b
ortho_is_lower_b set_source (uplow column_rep lower string_representation)
ortho_is_lower_b set_target (l2_orth_str inner)
create equiv_conversion ortho_is_lower_f
ortho_is_lower_f set_target (uplow column_rep lower string_representation)
ortho_is_lower_f set_source (l2_orth_str inner)

create equiv_conversion features_are_upper_f
features_are_upper_f set_source (features_db column_rep letter)
features_are_upper_f set_target (uplow column_rep upper)
create equiv_conversion features_are_upper_b
features_are_upper_b set_target (features_db column_rep letter)
features_are_upper_b set_source (uplow column_rep upper)

create equiv_conversion l1_lettersc
l1_lettersc set_target (uplow column_rep upper string_representation)
l1_lettersc set_source (l1_orth_str inner)

create equiv_conversion l1_lettersc2
l1_lettersc2 set_source (uplow column_rep upper string_representation)
l1_lettersc2 set_target (l1_orth_str inner)

create equiv_conversion l2_lettersc
l2_lettersc set_target (uplow column_rep upper string_representation)
l2_lettersc set_source (l2_orth_str inner)

create equiv_conversion l2_lettersc2
l2_lettersc2 set_source (uplow column_rep upper string_representation)
l2_lettersc2 set_target (l2_orth_str inner)

# these are the old solution to the problem of ensuring we can map from the string_rep to the feature
#    binary patterns; I suspect unnecessary with the above [UPDATE: CD -- tested script without the following, and conversions failed]
create parallel_conversion l1_lopc
l1_lopc set_source letter_rep
l1_lopc set_target (l1_orth_str get_target)
create parallel_conversion l1_lopc2
l1_lopc2 set_source (l1_orth_str get_target)
l1_lopc2 set_target letter_rep

create parallel_conversion l2_lopc
l2_lopc set_source letter_rep
l2_lopc set_target (l2_orth_str get_target)
create parallel_conversion l2_lopc2
l2_lopc2 set_source (l2_orth_str get_target)
l2_lopc2 set_target letter_rep

create parallel_conversion bananas
bananas set_source (l2_orth_str get_target)
bananas set_target feat_rep



create conversion_chain caser
caser set_manual 1
caser add_link_back ortho_is_lower_f
caser add_link_back ((uplow column_rep lower) conversion_key)
caser add_link_back (uplow conversion lower upper)
caser add_link_back features_are_upper_b

create conversion_chain caser_plus
caser_plus set_manual 1
caser_plus add_link_back caser
caser_plus add_link_back (features_db conversion letter features)
((features_db column_rep letter) find_conversion (l2_orth_str inner)) add_fallback caser

#create pattern l1_pattern
#l1_pattern set (l2_vocab column_rep Language keyed_representation) English

#create pattern l2_pattern
#l2_pattern set (l1_vocab column_rep Language keyed_representation) Dutch

create const_conversion l2_lang_conv
l2_lang_conv set_target language_kr
l2_lang_conv set_source (l2_vocab column_rep Word)
l2_lang_conv set L2

create const_conversion l1_lang_conv
l1_lang_conv set_target language_kr
l1_lang_conv set_source (l1_vocab column_rep Word)
l1_lang_conv set L1

##CONNECTIONS
#loglevel debug
create connection l1_loc
l1_loc autoconnect letters l1_words

create connection l2_loc
l2_loc autoconnect letters l2_words



#loc details

create connection l2_olc
l2_olc autoconnect l2_words letters

create connection l1_olc
l1_olc autoconnect l1_words letters



create connection l1_langc
l1_langc autoconnect l1_words languages

create connection l2_langc
l2_langc autoconnect l2_words languages

create connection lang_l1c
lang_l1c autoconnect languages l1_words 

create connection lang_l2c
lang_l2c autoconnect languages l2_words  




# ## ORTH-ORTH
create connection l2_lato
l2_lato autoconnect l2_words l2_words

create connection l1_lato
l1_lato autoconnect l1_words l1_words

# It’s certainly critical that lat_ed and lat_de are created AFTER l1_loc and l2_loc are connected 
# (or that you do a set_weight on them to increase their “length”).
create manual_conversion lat_ed 
lat_ed set_target (l2_vocab column_rep Word keyed_representation)
lat_ed set_source (l1_vocab column_rep Word keyed_representation)

create manual_conversion lat_de 
lat_de set_source (l2_vocab column_rep Word keyed_representation)
lat_de set_target (l1_vocab column_rep Word keyed_representation)

create connection l1_l2_lato
l1_l2_lato autoconnect l1_words l2_words

create connection l2_l1_lato
l2_l1_lato autoconnect l2_words l1_words 


(default_model) define_input orthographic (l2_vocab column_rep Word string_representation) features



((features_db column_rep features) find_conversion (l2_orth_str inner)) add_fallback caser_plus
((features_db column_rep features) find_conversion (l2_orth_str inner)) set_weight -1

create best_above_threshold_observer language_obs
language_obs target languages
(default_model) define_output language_decision language_obs


((default_model) parameters) load $parameter_file
