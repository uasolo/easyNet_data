create model drc

# LOAD DATABASES

# ## LETTER FEATURE REPRESENTATION
create dataframe_for_reps features_db
features_db load Databases/letter_features.eNd
create dataframe_for_reps no
no load Databases/no.eNd

# ## ORTHOGRAPHY, PHONOLOGY, FREQUENCIES
create dataframe_for_reps vocab
create dataframe_for_reps orth_freq_db
create dataframe_for_reps phon_freq_db
#vocab load Databases/Vocab_files/vocabulary_full.eNd
vocab load Databases/Vocab_files/drc.op.eNd
orth_freq_db load Databases/Vocab_files/drc.orth.eNd
phon_freq_db load Databases/Vocab_files/drc.phon.eNd

# LEXICAL ROUTE LAYERS

# ## FEATURE LAYER
create representation feat_rep
feat_rep type blocked_representation
feat_rep set_element (features_db column_rep features)
feat_rep number 8

create iac_layer features
features represent feat_rep
features add_hint plot_type plot_features.R



# ## LETTER LAYER

create representation letter_rep
letter_rep type blocked_representation
letter_rep set_element (features_db column_rep letter)
letter_rep number 8

create iac_layer letters 
letters  represent letter_rep

# ## ORTHOGRAPHIC LEXICON (LAYER)
create iac_layer orth_lex
orth_lex represent (vocab column_rep orthography)

# ## PHONOLOGICAL LEXICON (LAYER)
create iac_layer phon_lex
phon_lex represent (vocab column_rep phonology)

#OB ## PHONEME LAYER (OUTPUT BUFFER)
create string_split phon_str_conv
phon_str_conv set_blank "
phon_str_conv set_source (vocab column_rep phonology string_representation)
#phon_str_conv set_min 8
phon_str_conv create_block_keyed phon_str_bk

create string_split phon_str_no_blank
phon_str_no_blank set_source (vocab column_rep phonology string_representation)

create equiv_conversion phonstrbl
phonstrbl set_source (phon_str_no_blank get_target)
phonstrbl set_target (phon_str_conv get_target)

create iac_layer phoneme_out
#phoneme_out represent phoneme_chars
phoneme_out represent phon_str_bk

create bias_layer orth_freq 
orth_freq represent (orth_freq_db column_rep bias)
create bias_layer phon_freq
phon_freq represent (phon_freq_db column_rep bias)


# LEXICAL ROUTE CONNECTIONS

# ## FEATURE-LETTER
create connection flc
flc autoconnect features letters 

create parallel_conversion lfpc
lfpc set_source letter_rep
lfpc set_target feat_rep

# ## LETTER-ORTH
create string_split orth_str
orth_str set_blank "
orth_str set_source (vocab column_rep orthography string_representation)
#orth_str set_min 8


create equiv_conversion letters_conv
letters_conv set_target (features_db column_rep letter string_representation)
letters_conv set_source (orth_str inner) 

create equiv_conversion letters2
letters2 set_source (features_db column_rep letter string_representation)
letters2 set_target (orth_str inner) 

create parallel_conversion lopc
lopc set_source letter_rep
lopc set_target (orth_str get_target)

create parallel_conversion lopc2
lopc2 set_source (orth_str get_target)
lopc2 set_target letter_rep

include Models/lowerupper.eNs
((features_db column_rep letter) find_conversion (orth_str inner)) add_fallback caser

create connection loc
loc autoconnect letters orth_lex
#loc parameter_info

# ## ORTH-LETTER
create connection olc
olc autoconnect orth_lex letters 

# ## ORTH-PHON
create connection opc
opc autoconnect orth_lex phon_lex
 
# ## PHON-ORTH
create connection poc
poc autoconnect phon_lex orth_lex

# ## PHON-PHONEME
create connection ppmc
ppmc autoconnect phon_lex phoneme_out

# ## PHONEME-PHON
create connection pmpc
pmpc autoconnect phoneme_out phon_lex

# ## ORTH-ORTH
create connection lato
lato autoconnect orth_lex orth_lex

# ## PHON-PHON
create connection latp
latp autoconnect phon_lex phon_lex

# ## PHONEME-PHONEME
create connection latpm
latpm autoconnect phoneme_out phoneme_out


create equiv_conversion fconv1
fconv1 set_source (vocab column_rep orthography string_representation)
fconv1 set_target (orth_freq_db column_rep orthography string_representation)

create equiv_conversion fconv2
fconv2 set_source (vocab column_rep phonology string_representation)
fconv2 set_target (phon_freq_db column_rep phonology string_representation)


create connection freqb
freqb autoconnect orth_freq orth_lex

create connection pfreqb
pfreqb autoconnect phon_freq phon_lex

#freqb details

create strength_layer total
total represent (no column_rep no)

create pattern no_pat
no_pat set (no column_rep no) no

create summate_connection sum
sum set_autoconnect 0
sum attach orth_lex
total attach sum
sum answer_pattern no_pat
total set_lag 0

create mrom_yes_observer tla_yes
tla_yes target total

create mrom_no_observer mrom_no
mrom_no target total

# DECISION RULE

create serialize_blocks_observer thresholded_best_phonemes
thresholded_best_phonemes inner_type above_threshold_observer
thresholded_best_phonemes target phoneme_out
thresholded_best_phonemes rename_parameter threshold thresholded_best_phonemes_inner_threshold

#create verbose_observer vo
#create verbose_observer vo2
#create verbose_observer vo3
#vo target letters 

create regex_observer pronouncer
pronouncer target thresholded_best_phonemes
pronouncer add ".* "
pronouncer add .*\?.* 
pronouncer add ^[^"]*$

drc define_output pronunciation pronouncer

#create time_observer time
#time target phoneme_out

# LDT

create above_threshold_observer unit_decider
unit_decider target orth_lex
drc add unit_decider

create regex_observer word_yes
word_yes target unit_decider
word_yes add \?
word_yes add .+ yes


drc define_output lexical_decision word_yes
drc define_output lexical_decision tla_yes
drc define_output lexical_decision mrom_no




# ASSEMBLE MODEL


create string_representation pregraphemic
create string_representation grapheme_reps


create strength_layer best_letters
best_letters represent letter_rep

create staggered_blocked_connection bester
bester attach letters 
bester set_inner_type best_above_threshold_connection
bester set_target_inner_rep (features_db column_rep letter)
best_letters attach bester


create blocked_representation osgt
create string_representation osgt_inner
osgt set_element osgt_inner
osgt set_number 8
create flatten_string_conversion flat
flat set_source osgt
flat set_target pregraphemic


load wtstring_representation wtstring_representation.so

create wtstring_layer best_letters_str
best_letters_str represent osgt

create wtunkey_conversion osgt_unkey
osgt_unkey set_source (features_db column_rep letter)
osgt_unkey set_target osgt_inner

create wtkey_conversion psgt_key
psgt_key set_target (phon_str_bk element)
psgt_key set_source (phon_str_no_blank inner)
psgt_key set_weight 0.1

create wtstring_layer pre_graph 
pre_graph represent pregraphemic

create wtstring_layer graphemes
graphemes represent grapheme_reps

create wtstring_layer phon_str
phon_str represent (phon_str_no_blank get_target)

create strength_layer phonemes
phonemes represent phon_str_bk

create wtregex_side_effect_conversion graphemize
graphemize set_source pregraphemic
graphemize set_target grapheme_reps

create dataframe parse_graphemes_db
parse_graphemes_db load Databases/Vocab_files/RC99_parse_graphemes.eNd
parse_graphemes_db for_each_row graphemize add $search $replace $grapheme

create string_representation amphons

create string_representation flatamphons

create flatten_string_conversion pflat
pflat set_source amphons
pflat set_target flatamphons

create regex_conversion phonotactic
phonotactic set_target (vocab column_rep phonology string_representation)
phonotactic set_source flatamphons

create dataframe phonotactic_db
phonotactic_db load Databases/Vocab_files/DRC_phonotac.eNd
phonotactic_db for_each_row phonotactic add $search $replace

create wtregex_side_effect_conversion gpc
gpc set_target amphons
gpc set_source grapheme_reps

create dataframe grapheme_phoneme_db

grapheme_phoneme_db load Databases/Vocab_files/RC99_grapheme_phoneme.eNd

grapheme_phoneme_db for_each_row gpc add $search $replace $phoneme
create connection graphemizer
graphemizer autoconnect pre_graph graphemes

create connection gpcer
gpcer autoconnect graphemes phon_str

create connection phonbin
phonbin autoconnect phon_str phonemes


create connection nlpl
nlpl autoconnect phonemes phoneme_out


create blocked_connection bestlls
bestlls autoconnect best_letters best_letters_str

create connection blspg
blspg autoconnect best_letters_str pre_graph 

drc define_input orthographic (vocab column_rep orthography string_representation) features


#create steps cycle
#create group src
#src add features letters flc orth_lex loc olc phon_lex opc poc ppmc pmpc phoneme_out lato latp latpm orth_freq freqb thresholded_best_phonemes vo vo2 vo3 time pronouncer lexical_decider bester best_letters best_letters_str bestlls pre_graph graphemes phon_str blspg gpcer graphemizer phonemes nlpl phon_freq pfreqb

# SET PARAMETERS

#create database psfile
#psfile load params

#create parameterset ps
#psfile for_each_row ps set $parameter $value
#src parameter_source ps

#loc details
#pmpc details

#flc parameter_info
#loc parameter_info
#ps get lato_inhib

# CREATE CYCLE TO RUN THE MODEL

#cycle add src step
#cycle add vo2 report
#cycle add vo3 report
#cycle add thresholded_best_phonemes report
#cycle add blahf write thresholded_best_phonemes pronouncer time
#cycle add blahf write (best_letters_str state) (pre_graph state) (graphemes state) (phon_str state) vo pronouncer time

#vo target letters 

drc add thresholded_best_phonemes

include Models/extras.eNs
caser_plus add_fallback extras
((features_db column_rep features) find_conversion (orth_str inner)) add_fallback caser_plus
((features_db column_rep features) find_conversion (orth_str inner)) set_weight -1

graphemes set_lag 0
phon_str set_lag 0
phonemes set_lag 0
best_letters set_lag 0
best_letters_str set_lag 0
pre_graph set_lag 0
